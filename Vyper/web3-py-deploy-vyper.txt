本文参考: https://web3py.readthedocs.io/en/stable/contracts.html


安装
npm install -g ganache-cli

pip install vyper
pip install web3

------------------------------------------------------------------
首先运行 ganache-cli 测试环境，生产10个虚拟账号
Available Accounts
==================
(0) 0x158579120aeb130cd1858111e2c1b105b959c591 (~100 ETH)
(1) 0x3ce7de9b8af6815315a11f571fd6f840e4210c23 (~100 ETH)
(2) 0x933787198aa6a4e97d33beee3ce47831e15f135c (~100 ETH)
(3) 0x713882c060317f9d01ec34c383e70cb8ba0e2932 (~100 ETH)
(4) 0x1fc45278434ad92d10dc1fbe2e697da0c470db59 (~100 ETH)
(5) 0x092ecfb771d63f1f7503355b62cd7c5180b64c65 (~100 ETH)
(6) 0xa6bfac3094eaeb3a675dc7f693c4c7de2ce0f25d (~100 ETH)
(7) 0xf5856f925f687e5b714fd161a75ec0ff238c9a8e (~100 ETH)
(8) 0x33dcd856d52de0cb8e9aa6c650d1b6f38ce8f2ef (~100 ETH)
(9) 0xbf28e3f29a6a913ba7e18c8a546dad5fcf233de0 (~100 ETH)

Private Keys
==================
(0) 0x837a58146d25b86101807c43fd1312217fe9680cd70ce086e06289853a14770a
(1) 0x515a379caf26ba8c0ca15d059e85c133355276e2031da03f36639f04a7ea9192
(2) 0x4f6da8ab7da7453222257ad3cd50203f805a8c1295e0f01f87d1d62a07fd0913
(3) 0xd305bc1ddc2aebbfcf8a14ad2aa130672d3ba38b3da89032a348516b84775426
(4) 0x94d7e49c4a47647da0ee46bc9932189fec4dff31d74229d7c47cec1d965256aa
(5) 0x4c8e8efb1aeda3a19eec385b2986d43faae3fd32399c3d0b94d6b65115b15a34
(6) 0x9c0921f0bba02c03f3947267e91f38732e0fa09bcd7fdc2f0e5326963b942ae6
(7) 0x4d134536738e5f0fa0229f0131dd460f713fb194900d1b5db2899ff5af25c5d9
(8) 0x8bfee349853652747d8d115103ac82d436ef6fd6ab93eac4f82bc16f02716bdf
(9) 0x7c74654cf11201d953afec71e588ad57bee25789b5caff2990e2787ea9863e66

HD Wallet
==================
Mnemonic:      cheap drip dinosaur human welcome run surround random obey board water wash
Base HD Path:  m/44'/60'/0'/0/{account_index}

Gas Price
==================
20000000000

Gas Limit
==================
6721975

Listening on 127.0.0.1:8545

eth_sendTransaction

  Transaction: 0x23e7e1848f181a6ce0544831299446cb1b92dd8aa2e67550850e035968fa123d
  Contract created: 0x189ef16d4477dca874093dfd2b41360b8e1b6e0a
  Gas usage: 103739
  Block Number: 1
  Block Time: Wed Jul 17 2019 19:33:32 GMT+0800 (China Standard Time)
------------------------------------------------------------------

编译，获取abi_python
(.py3) pro:Vyper play$ vyper -f abi_python hello.vy
[{'outputs': [], 'inputs': [], 'constant': False, 'payable': False, 'type': 'constructor'}, {'name': 'change_name', 'outputs': [], 'inputs': [{'type': 'bytes', 'name': 'new_name'}], 'constant': False, 'payable': False, 'type': 'function', 'gas': 70954}, {'name': 'say_hello', 'outputs': [{'type': 'bytes', 'name': 'out'}], 'inputs': [], 'constant': False, 'payable': False, 'type': 'function', 'gas': 8058}, {'name': 'name', 'outputs': [{'type': 'bytes', 'name': 'out'}], 'inputs': [], 'constant': True, 'payable': False, 'type': 'function', 'gas': 5150}]

编译，获取bytecode
(.py3) pro:Vyper play$ vyper hello.vy
0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052341561009857600080fd5b6010610140527f5361746f736869204e616b616d6f746f000000000000000000000000000000006101605261014080600060c052602060c020602082510161012060006002818352015b826101205160200211156100f557610117565b61012051602002850151610120518501555b81516001018083528114156100e2575b5050505050506104b556600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052634596d11f600051141561013057602060046101403734156100b457600080fd5b60386004356004016101603760186004356004013511156100d457600080fd5b61016080600060c052602060c020602082510161012060006002818352015b8261012051602002111561010657610128565b61012051602002850151610120518501555b81516001018083528114156100f3575b505050505050005b63b459850360005114156102aa57341561014957600080fd5b60006007610140527f48656c6c6f2c2000000000000000000000000000000000000000000000000000610160526101406007806020846101a001018260208501600060046012f1505080518201915050600060018160c052602060c020016020836101a001018260c052602060c0205461012060006001818352015b826101205160200211156101d8576101fa565b61012051850154610120516020028501525b81516001018083528114156101c5575b50505050508060c052602060c020548201915050806101a0526101a09050805160200180610240828460006004600a8704601201f161023857600080fd5b50506102405160206001820306601f82010390506102a061024051601f818352015b826102a051111561026a57610286565b60006102a05161026001535b815160010180835281141561025a575b5050506020610220526040610240510160206001820306601f8201039050610220f3005b6306fdde03600051141561038d5734156102c357600080fd5b60008060c052602060c020610180602082540161012060006002818352015b826101205160200211156102f557610317565b61012051850154610120516020028501525b81516001018083528114156102e2575b5050505050506101805160206001820306601f82010390506101e0610180516018818352015b826101e051111561034d57610369565b60006101e0516101a001535b815160010180835281141561033d575b5050506020610160526040610180510160206001820306601f8201039050610160f3005b60006000fd5b6101226104b5036101226000396101226104b5036000f3

------------------------------------------------------------------
运行ipython

In [1]: from web3 import Web3

In [2]: url='http://127.0.0.1:8545'
   ...: w3=Web3(Web3.HTTPProvider(url))

In [3]: w3.isConnected()
Out[3]: True

In [4]: w3.eth.defaultAccount = w3.eth.accounts[0]

In [5]: address='0x3e294b3cfd377f9bb502f108ecfcf6d3d006f39b'

In [23]: bytecode='0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052341561009857600080fd5b6010610140527f5361746f736869204e616b616d6f746f000000000000000000000000000000006101605261014080600060c052602060c020602082510161012060006002818352015b826101205160200211156100f557610117565b61012051602002850151610120518501555b81516001018083528114156100e2575b5050505050506104b556600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052634596d11f600051141561013057602060046101403734156100b457600080fd5b60386004356004016101603760186004356004013511156100d457600080fd5b61016080600060c052602060c020602082510161012060006002818352015b8261012051602002111561010657610128565b61012051602002850151610120518501555b81516001018083528114156100f3575b505050505050005b63b459850360005114156102aa57341561014957600080fd5b60006007610140527f48656c6c6f2c2000000000000000000000000000000000000000000000000000610160526101406007806020846101a001018260208501600060046012f1505080518201915050600060018160c052602060c020016020836101a001018260c052602060c0205461012060006001818352015b826101205160200211156101d8576101fa565b61012051850154610120516020028501525b81516001018083528114156101c5575b50505050508060c052602060c020548201915050806101a0526101a09050805160200180610240828460006004600a8704601201f161023857600080fd5b50506102405160206001820306601f82010390506102a061024051601f818352015b826102a051111561026a57610286565b60006102a05161026001535b815160010180835281141561025a575b5050506020610220526040610240510160206001820306601f8201039050610220f3005b6306fdde03600051141561038d5734156102c357600080fd5b60008060c052602060c020610180602082540161012060006002818352015b826101205160200211156102f557610317565b61012051850154610120516020028501525b81516001018083528114156102e2575b5050505050506101805160206001820306601f82010390506101e0610180516018818352015b826101e051111561034d57610369565b60006101e0516101a001535b815160010180835281141561033d575b5050506020610160526040610180510160206001820306601f8201039050610160f3005b60006000fd5b6101226104b5036101226000396101226104b5036000f3'
  
In [7]: abi=[{'outputs': [], 'inputs': [], 'constant': False, 'payable': False, 'type': 'constructor'}, {'name':
   ...:  'change_name', 'outputs': [], 'inputs': [{'type': 'bytes', 'name': 'new_name'}], 'constant': False, 'pa
   ...: yable': False, 'type': 'function', 'gas': 70954}, {'name': 'say_hello', 'outputs': [{'type': 'bytes', 'n
   ...: ame': 'out'}], 'inputs': [], 'constant': False, 'payable': False, 'type': 'function', 'gas': 8058}, {'na
   ...: me': 'name', 'outputs': [{'type': 'bytes', 'name': 'out'}], 'inputs': [], 'constant': True, 'payable': F
   ...: alse, 'type': 'function', 'gas': 5150}]

In [8]: Greeter = w3.eth.contract(abi=abi,bytecode=bytecode)

In [9]: Greeter
Out[9]: web3.utils.datatypes.Contract

In [10]: tx_hash = Greeter.constructor().transact()

In [11]: tx_hash
Out[11]: HexBytes('0xe275c6289ae77f9c2cc057a8bcc1c4496322df7bb92712e10cb719e2fb29cb10')

In [12]: tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)

In [13]: tx_receipt
Out[13]:
AttributeDict({'transactionHash': HexBytes('0xe275c6289ae77f9c2cc057a8bcc1c4496322df7bb92712e10cb719e2fb29cb10'),
 'transactionIndex': 0,
 'blockHash': HexBytes('0xe6b716cc5c718fedb01bfb8c893b665ce0bd43ee6b2d4fbde92b1b776b618b5b'),
 'blockNumber': 1,
 'from': '0xd6c535e55040f728779f784c27fa8399de9f4894',
 'to': None,
 'gasUsed': 348496,
 'cumulativeGasUsed': 348496,
 'contractAddress': '0x070379439452E5A2b0E7B1860CF9Ad03A7225565',
 'logs': [],
 'status': 1,
 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
 'v': '0x1c',
 'r': '0x4481fe418bf4409f018e1856b13f8e414a2409a0dc63dc6caf4ac1657682db96',
 's': '0x1551a2079b6c03ecbed48d656a37bac4116edec6cc13b876b3cc25d4d269da56'})

In [14]: greeter = w3.eth.contract(
    ...:     address=tx_receipt.contractAddress,
    ...:     abi=abi,
    ...: )

In [15]: greeter
Out[15]: <web3.utils.datatypes.Contract at 0x10be246d8>

In [16]: greeter.functions.say_hello().call()
Out[16]: b'Hello, Satoshi Nakamoto'

In [18]: tx_hash =greeter.functions.change_name(b'Neo').transact()

In [19]: tx_hash
Out[19]: HexBytes('0x5ee7a8e72f6353a06390f2d8dc0bc32ba4e205d02a0b8c80537a3938b4ad7a6e')

In [20]: w3.eth.waitForTransactionReceipt(tx_hash)
Out[20]:
AttributeDict({'transactionHash': HexBytes('0x5ee7a8e72f6353a06390f2d8dc0bc32ba4e205d02a0b8c80537a3938b4ad7a6e'),
 'transactionIndex': 0,
 'blockHash': HexBytes('0xc900dc3f995322eddc3033c1bd967ce4fbec4cd33cdbfe8a2b56b9f412458bda'),
 'blockNumber': 2,
 'from': '0xd6c535e55040f728779f784c27fa8399de9f4894',
 'to': '0x070379439452e5a2b0e7b1860cf9ad03a7225565',
 'gasUsed': 32536,
 'cumulativeGasUsed': 32536,
 'contractAddress': None,
 'logs': [],
 'status': 1,
 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
 'v': '0x1c',
 'r': '0xb7757e2d0a6462516cc77e23fa7e761b7746da4db099b2697a8fcc679a732bca',
 's': '0x77b4a0d66d2ca726da7f387fa4528eebc2b98ce3ffaffc71174c61ec5d109cc9'})

In [21]: greeter.functions.say_hello().call()
Out[21]: b'Hello, Neo'

In [22]: w3.isConnected()
Out[22]: False